df_all_school_reviews <- df_school_review
} else{
df_all_school_reviews <- bind_rows(df_all_school_reviews,
df_school_review)
}
Sys.sleep(5)
}
school_url
school_url <- v_school_urls[s]
s
paste("Scraping: ", school_url)
v_school_urls
school_url_left <- 'https://www.greatschools.org'
v_school_url_right <- df_school_list$links$reviews
v_school_url_right <- gsub("#Reviews", "reviews/", v_school_url_right)
v_school_urls <- paste0(school_url_left, v_school_url_right)
v_school_urls <- setdiff(v_school_urls[df_schools$num_reviews > 0], NA)
v_school_urls
v_school_url_right <- df_school_list$links$reviews
v_school_url_right <- gsub("#Reviews", "reviews/", v_school_url_right)
v_school_urls <- paste0(school_url_left, v_school_url_right)
v_school_urls
setdiff(v_school_urls[df_schools$num_reviews > 0], NA)
v_school_urls[df_schools$num_reviews > 0]
v_school_urls <- paste0(school_url_left, v_school_url_right)
v_school_urls[df_schools$num_reviews > 0]
v_school_urls
setdiff(v_school_urls[df_schools$num_review > 0], NA)
v_school_urls <- setdiff(v_school_urls[df_schools$num_review > 0], NA)
for (s in 1:length(v_school_urls)) {
school_url <- v_school_urls[s]
#school_url <- 'https://www.greatschools.org/california/santa-barbara/11279-Crane-Country-Day-School/reviews/'
paste("Scraping: ", school_url)
source("scrape_school_reviews.R")
if (s == 1) {
df_all_school_reviews <- df_school_review
} else{
df_all_school_reviews <- bind_rows(df_all_school_reviews,
df_school_review)
}
Sys.sleep(5)
}
# Scraping review pages
## Libraries
library(RSelenium)
library(rvest)
library(stringr)
## Setting up page to scrape
### URL
#school_url <- "https://www.greatschools.org/california/santa-barbara/11279-Crane-Country-Day-School/reviews/"
### Navigate to page
remDr$navigate(school_url)
### Scroll down to show all reviews
### expand reviews by clicking on "more" links
while (length(remDr$findElements("link text", "More")) != 0) {
print(length(remDr$findElements("link text", "More")))
remDr$findElements("link text", "More")[[1]]$clickElement()
remDr$executeScript(paste("scroll(0,", i * 1080, ");"))
Sys.sleep(1)
}
## Read page source
webpage <- read_html(remDr$getPageSource()[[1]])
## Start extracting elements
### Extract global elements
webpage %>%
html_elements("div.static-container") %>%
html_element("div.container") %>%
html_element("a") %>%
html_text() -> school_name
webpage %>%
html_elements("div.user-reviews-container") %>%
html_element("div.five-star-review") %>%
html_element("div.comment") %>%
html_text() -> overall_comments
webpage %>%
html_elements("div.user-reviews-container") %>%
html_element("div.answer") %>%
as.character() %>%
str_count("filled-star") -> overall_rating
webpage %>%
html_elements("div.user-reviews-container") %>%
html_element("div.user-type") %>%
html_text() -> review_type
webpage %>%
html_elements("div.user-reviews-container") %>%
html_element("div.type-and-date") %>%
html_text() %>%
as.Date("%B %d, %Y") -> review_date
### Extract topic reviews
webpage %>%
html_elements("div.user-reviews-container") %>%
as.character() %>%
str_count('<div class="topic"') -> num_topic_reviews
webpage %>%
html_elements("div.topic") %>%
html_text() -> topic_labels
webpage %>%
html_elements("div.topical-review-detail") %>%
html_element("div.comment") %>%
html_text() -> topic_comments
#### Function to extract topic comments
review_index <- ifelse(identical(num_topic_reviews, integer(0)),
NA,
rep(1:length(num_topic_reviews), times = num_topic_reviews))
fn_extract_topic_comments <- function(my_topic) {
tmp <- rep(NA, times = length(review_date))
if(identical(num_topic_reviews, integer(0))){
return(tmp)
break
} else{
if(num_topic_reviews)
tmp <- rep(NA, times = length(review_date))
tmp[review_index[topic_labels == my_topic]] <-
topic_comments[which(topic_labels == my_topic)]
return(tmp)
}
}
#### Extract topic comments
homework_comments <- fn_extract_topic_comments("Homework")
teacher_comments <- fn_extract_topic_comments("Teachers")
character_comments <- fn_extract_topic_comments("Character")
leadership_comments <- fn_extract_topic_comments("Leadership")
bullying_comments <- fn_extract_topic_comments("Bullying")
learning_diffs_comments <- fn_extract_topic_comments("Learning Differences")
### Topic ratings
webpage %>%
html_elements("div.topical-item") %>%
html_element("div.topic-details") %>%
html_text() -> topic_rating_label
topic_rating_label <-
topic_rating_label[-grep("\\(", topic_rating_label)]
webpage %>%
html_elements("div.topical-item") %>%
html_element("div.topical-average") %>%
html_element("div.numeric") %>%
html_text() %>%
as.numeric() -> topic_rating
webpage %>%
html_elements("div.user-reviews-container") %>%
as.character() %>%
str_count('<div class="topical-item"') -> num_topic_ratings
webpage %>%
html_elements("div.user-reviews-container") %>%
as.character() %>%
str_count('<div class="topical-item"') -> num_topic_ratings
#### Function to extract topic ratings
review_index_ratings <- ifelse(identical(num_topic_ratings, integer(0)),
NA,
rep(1:length(num_topic_reviews), times = num_topic_ratings))
fn_extract_topic_rating <- function(my_topic) {
tmp <- rep(NA, times = length(review_date))
if(identical(num_topic_ratings, integer(0))){
return(tmp)
break
} else{
tmp[review_index_ratings[grep(my_topic, topic_rating_label)]] <-
topic_rating[grep(my_topic, topic_rating_label)]
return(tmp)
}
}
#### Extract topic ratings
homework_rating <- fn_extract_topic_rating("Homework")
teacher_rating <- fn_extract_topic_rating("Teachers")
character_rating <- fn_extract_topic_rating("Character")
leadership_rating <- fn_extract_topic_rating("Leadership")
bullying_rating <- fn_extract_topic_rating("Bullying")
learning_diffs_rating <- fn_extract_topic_rating("Learning Differences")
## Combine everything together in data frame
df_school_review <- data.frame(
school_name,
review_type,
review_date,
overall_rating,
overall_comments,
homework_rating,
teacher_rating,
character_rating,
leadership_rating,
bullying_rating,
learning_diffs_rating,
homework_comments,
teacher_comments,
character_comments,
leadership_comments,
bullying_comments,
learning_diffs_comments
)
learning_diffs_rating
num_topic_ratings
review_index_ratings
## Read page source
webpage <- read_html(remDr$getPageSource()[[1]])
## Start extracting elements
### Extract global elements
webpage %>%
html_elements("div.static-container") %>%
html_element("div.container") %>%
html_element("a") %>%
html_text() -> school_name
webpage %>%
html_elements("div.user-reviews-container") %>%
html_element("div.five-star-review") %>%
html_element("div.comment") %>%
html_text() -> overall_comments
webpage %>%
html_elements("div.user-reviews-container") %>%
html_element("div.answer") %>%
as.character() %>%
str_count("filled-star") -> overall_rating
webpage %>%
html_elements("div.user-reviews-container") %>%
html_element("div.user-type") %>%
html_text() -> review_type
webpage %>%
html_elements("div.user-reviews-container") %>%
html_element("div.type-and-date") %>%
html_text() %>%
as.Date("%B %d, %Y") -> review_date
### Extract topic reviews
webpage %>%
html_elements("div.user-reviews-container") %>%
as.character() %>%
str_count('<div class="topic"') -> num_topic_reviews
webpage %>%
html_elements("div.topic") %>%
html_text() -> topic_labels
webpage %>%
html_elements("div.topical-review-detail") %>%
html_element("div.comment") %>%
html_text() -> topic_comments
#### Function to extract topic comments
review_index <- rep(1:length(num_topic_reviews), times = num_topic_reviews)
fn_extract_topic_comments <- function(my_topic) {
tmp <- rep(NA, times = length(review_date))
tmp[review_index[topic_labels == my_topic]] <- topic_comments[which(topic_labels == my_topic)]
return(tmp)
}
#### Extract topic comments
homework_comments <- fn_extract_topic_comments("Homework")
teacher_comments <- fn_extract_topic_comments("Teachers")
character_comments <- fn_extract_topic_comments("Character")
leadership_comments <- fn_extract_topic_comments("Leadership")
bullying_comments <- fn_extract_topic_comments("Bullying")
learning_diffs_comments <- fn_extract_topic_comments("Learning Differences")
### Topic ratings
webpage %>%
html_elements("div.topical-item") %>%
html_element("div.topic-details") %>%
html_text() -> topic_rating_label
topic_rating_label <-
topic_rating_label[-grep("\\(", topic_rating_label)]
webpage %>%
html_elements("div.topical-item") %>%
html_element("div.topical-average") %>%
html_element("div.numeric") %>%
html_text() %>%
as.numeric() -> topic_rating
webpage %>%
html_elements("div.user-reviews-container") %>%
as.character() %>%
str_count('<div class="topical-item"') -> num_topic_ratings
webpage %>%
html_elements("div.user-reviews-container") %>%
as.character() %>%
str_count('<div class="topical-item"') -> num_topic_ratings
#### Function to extract topic ratings
review_index_ratings <- rep(1:length(num_topic_reviews), times = num_topic_ratings)
fn_extract_topic_rating <- function(my_topic) {
tmp <- rep(NA, times = length(review_date))
tmp[review_index_ratings[grep(my_topic, topic_rating_label)]] <-
topic_rating[grep(my_topic, topic_rating_label)]
return(tmp)
}
#### Extract topic ratings
homework_rating <- fn_extract_topic_rating("Homework")
teacher_rating <- fn_extract_topic_rating("Teachers")
character_rating <- fn_extract_topic_rating("Character")
leadership_rating <- fn_extract_topic_rating("Leadership")
bullying_rating <- fn_extract_topic_rating("Bullying")
learning_diffs_rating <- fn_extract_topic_rating("Learning Differences")
## Combine everything together in data frame
df_school_review <- data.frame(
school_name,
review_type,
review_date,
overall_rating,
overall_comments,
homework_rating,
teacher_rating,
character_rating,
leadership_rating,
bullying_rating,
learning_diffs_rating,
homework_comments,
teacher_comments,
character_comments,
leadership_comments,
bullying_comments,
learning_diffs_comments
)
for (s in 1:length(v_school_urls)) {
school_url <- v_school_urls[s]
#school_url <- 'https://www.greatschools.org/california/santa-barbara/11279-Crane-Country-Day-School/reviews/'
paste("Scraping: ", school_url)
source("scrape_school_reviews.R")
if (s == 1) {
df_all_school_reviews <- df_school_review
} else{
df_all_school_reviews <- bind_rows(df_all_school_reviews,
df_school_review)
}
Sys.sleep(5)
}
df_all_school_reviews %>% group_by(school_name) %>% summarise(average_rating = mean(overall_rating))
df_all_school_reviews %>% group_by(school_name) %>% summarise(average_rating = mean(overall_rating, na.rm = TRUE)) %>% arrange(-average_rating)
View(df_school_list)
View(df_school_list)
View(df_school_list)
df_school_list
df_school_list %>% filter(name = "El Camino Elementary")
df_school_list %>% filter(name == "El Camino Elementary")
df_school_list %>% filter(name == "El Camino Elementary") %>% view()
df_school_list %>% filter(name == "El Camino Elementary") %>% as.matrix()
df_school_list %>% filter(name == "El Camino Elementary") %>% select(parentRating, `rating_All students`)
names(df_school_list)
df_school_list %>% filter(name == "El Camino Elementary") %>% select(parentRating, `rating_All students`, school_value)
df_school_list %>% filter(name == "El Camino Elementary") %>% select(parentRating, `rating_All students`, school_value, rating)
df_school_list %>% filter(name == "El Camino Elementary") %>% select(parentRating, `rating_All students`, school_value, rating, ratingScale)
df_school_list %>% filter(name == "El Camino Elementary") %>% select(parentRating, `rating_All students`, school_value, rating)
df_school_list %>% filter(name == "El Camino Elementary") %>% select(parentRating, `rating_All students`, school_value, rating, percentage_Hispanic)
df_school_list %>% filter(name == "El Camino Elementary") %>% select(parentRating, `rating_All students`, school_value, rating, percentLowIncome)
df_school_list %>% filter(name == "El Camino Elementary") %>% select(parentRating, `rating_All students`, school_value, rating, Hispanic)
df_school_list %>% filter(name == "El Camino Elementary") %>% select(parentRating, `rating_All students`, school_value, rating, Hispanic)
df_school_list %>% filter(name == "El Camino Elementary") %>% names()
df_school_list %>% filter(name == "El Camino Elementary") %>% select(rating_Hispanic)
df_school_list %>% filter(name == "El Camino Elementary") %>% select(percentage_Hispanic)
df_schools <- bind_rows(df_schools, fn_scrape_school_page(school_list_url_left, i, school_list_url_right))
df_schools
fn_scrape_school_page <- function(my_left_url, my_page_num, my_right_url){
url <- paste(my_left_url, my_page_num, my_right_url, sep = "")
read_html(url) %>%
html_element(xpath = school_list_js_xpath) %>%
html_text(trim = TRUE) %>%
str_replace(fixed("window.gon"), "gon") -> txt
tmp <- tempfile()
write_file(
txt,
file = tmp
)
txt2 <- read_lines(
tmp
)
ctx <- v8()
ctx$eval(txt2[2])
l_school_reviews <- ctx$get("gon")
my_df <- data.frame(l_school_reviews$search$schools, pg_num = my_page_num)
df_ethnicity_info <- data.frame()
for (i in 1:length(my_df$ethnicityInfo)){
my_df$ethnicityInfo[[i]] %>%
pivot_wider(names_from = label,
values_from = setdiff(names(my_df$ethnicityInfo[[i]]), "label"),
names_sep = "_") %>%
bind_rows(df_ethnicity_info) -> df_ethnicity_info
}
my_df <- cbind(my_df, df_ethnicity_info) -> my_df
return(my_df)
}
df_schools <- bind_rows(df_schools, fn_scrape_school_page(school_list_url_left, i, school_list_url_right))
df_schools
df_schools$ethnicityInfo
df_schools %>% filter(name == "El Camino Elementary") %>% select(ethnicityInfo)
df_schools %>% filter(name == "El Camino Elementary")
df_schools$Hispanic
df_schools$school_name
View(df_schools)
View(df_schools)
View(df_schools)
num_pages_to_scrape <- 5
source("scrape_school_lists.R")
df_schools$school_name
df_schools$Hispanic
num_pages_to_scrape <- 1
source("scrape_school_lists.R")
df_schools$ethnicity_info
df_schools$school_name
df_schools$ethnicity_info[16]
fn_scrape_school_page(school_list_url_left, i, school_list_url_right)
df_schools$Hispanic
df_schools$ethnicity_info
source("scrape_school_lists.R")
source("scrape_school_lists.R")
df_schools
df_schools[16]
df_schools$school_name
df_schools$percentage_hispanic[16]
source('~/GitHub/greatschools_scraping/scrape_school_lists.R', echo=TRUE)
source("scrape_school_lists.R")
df_schools$percentage_hispanic[16]
source("scrape_school_lists.R")
df_schools$percentage_hispanic[16]
df_schools$ethnicity_info
df_schools$ethnicity_info[[16]]
pivot_wider(df_schools$ethnicity_info[[16]], names_from = label
)
pivot_wider(df_schools$ethnicity_info[[16]], names_from = label)
setdiff(names(my_df$ethnicityInfo[[i]]), "label")
setdiff(names(df_schools$ethnicity_info, "label")
setdiff(names(df_schools$ethnicity_info, "label"))
setdiff(names(df_schools$ethnicity_info), "label")
setdiff(names(df_schools$ethnicity_info[[16]]), "label")
pivot_wider(df_schools$ethnicity_info[[16]], names_from = label, values_from = setdiff(names(df_schools$ethnicity_info[[16]]), "label"))
pivot_wider(df_schools$ethnicity_info[[16]], names_from = label, values_from = setdiff(names(df_schools$ethnicity_info[[16]]), "label")) %>% select(percentage_Hispanic)
pivot_wider(df_schools$ethnicity_info[[16]], names_from = label, values_from = setdiff(names(df_schools$ethnicity_info[[16]]), "label")) %>% select(percentage_Hispanic) -> df[,16]
pivot_wider(df_schools$ethnicity_info[[16]], names_from = label, values_from = setdiff(names(df_schools$ethnicity_info[[16]]), "label")) %>% select(percentage_Hispanic) -> df[16,]
pivot_wider(df_schools$ethnicity_info[[16]], names_from = label, values_from = setdiff(names(df_schools$ethnicity_info[[16]]), "label")) %>% select(percentage_Hispanic) %>% mutate(school_id = df_schools$id[16])
source('~/GitHub/greatschools_scraping/scrape_school_lists.R', echo=TRUE)
df_schools$percentage_hispanic[16]
knitr::opts_chunk$set(echo = TRUE)
state_name <- "california"
city_name <- "goleta"
school_list_url_left <- paste("https://www.greatschools.org/",
state_name,
"/",
city_name,
"/schools/?page=")
school_list_url_left <- paste0("https://www.greatschools.org/",
state_name,
"/",
city_name,
"/schools/?page=",
sep = "")
#school_list_url_left <- "https://www.greatschools.org/california/santa-barbara/schools/?page="
school_list_url_right <- "&view=table"
school_list_js_xpath <- "/html/head/script[1]"
num_pages_to_scrape <- 1
source("scrape_school_lists.R")
school_list_outfile <- paste(city_name, "_list.RData")
save(df_school_list, file = school_list_outfile)
school_list_outfile <- paste0(city_name, "_list.RData", sep = "")
save(df_school_list, file = school_list_outfile)
load("~/GitHub/greatschools_scraping/goleta_list.RData")
View(df_school_list)
df_school_list
names(df_school_list)
names(df_school_list) <- names(df_school_list)[1:length(df_school_list))]
names(df_school_list) <- names(df_school_list)[1:length(df_school_list))]
length(df_school_list)
names(df_school_list) <- names(df_school_list)[1:length(df_school_list))]
names(df_school_list) <- names(df_school_list)[1:length(df_school_list)]
View(df_school_list)
df_school_list
View(df_schools)
source("scrape_school_lists.R")
source("scrape_school_lists.R")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rvest)
library(RSelenium)
library(V8)
library(jsonlite)
library(stringr)
state_name <- "california"
city_name <- "goleta"
school_list_url_left <- paste0("https://www.greatschools.org/",
state_name,
"/",
city_name,
"/schools/?page=",
sep = "")
#school_list_url_left <- "https://www.greatschools.org/california/santa-barbara/schools/?page="
school_list_url_right <- "&view=table"
school_list_js_xpath <- "/html/head/script[1]"
num_pages_to_scrape <- 1
source("scrape_school_lists.R")
source("scrape_school_lists.R")
i
fn_scrape_school_page(school_list_url_left, i, school_list_url_right)
df_schools
names(df_schools)
source("scrape_school_lists.R")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rvest)
library(RSelenium)
library(V8)
library(jsonlite)
library(stringr)
state_name <- "california"
city_name <- "goleta"
school_list_url_left <- paste0("https://www.greatschools.org/",
state_name,
"/",
city_name,
"/schools/?page=",
sep = "")
#school_list_url_left <- "https://www.greatschools.org/california/santa-barbara/schools/?page="
school_list_url_right <- "&view=table"
school_list_js_xpath <- "/html/head/script[1]"
num_pages_to_scrape <- 1
source("scrape_school_lists.R")
school_list_outfile <- paste0(city_name, "_list.RData", sep = "")
save(df_schools, file = school_list_outfile)
school_url_left <- 'https://www.greatschools.org'
v_school_url_right <- df_schools$links_reviews
v_school_url_right <- gsub("#Reviews", "reviews/", v_school_url_right)
v_school_urls <- paste0(school_url_left, v_school_url_right)
v_school_urls <- setdiff(v_school_urls[df_schools$num_reviews > 0], NA)
#school_url <- 'https://www.greatschools.org/california/santa-barbara/11279-Crane-Country-Day-School/reviews/'
rD <- rsDriver(browser = "firefox",
verbose = F)
remDr <- rD[["client"]]
remDr$open()
